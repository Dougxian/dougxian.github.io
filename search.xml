<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ElasticSearch浅谈</title>
    <url>/2020/02/20/ElasticSearch%E6%B5%85%E8%B0%88/</url>
    <content><![CDATA[<h1 id="Es是什么？"><a href="#Es是什么？" class="headerlink" title="Es是什么？"></a>Es是什么？</h1><pre><code>ElasticSearch是一款基于Lucene的全文搜索引擎。</code></pre><h3 id="什么是全文搜索引擎？"><a href="#什么是全文搜索引擎？" class="headerlink" title="什么是全文搜索引擎？"></a>什么是全文搜索引擎？</h3><blockquote>
<p>百度：全文搜索引擎就是通过从互联网上提取的各个网站的信息（以网页文字为主）而建立的数据库中，检索与用户查询条件匹配的相关记录，然后按一定的排列顺序将结果返回给用户。</p>
</blockquote>
<p>Es是对Lucene的封装，同时也是Lucene的分布式解决方案。将绝大多数的Lucene功能封装使其更容易被使用。Github、Stackoverflow等网站都在使用ElasticSearch作为搜索引擎。同时其优秀的分布式作业管理机制使其越来越被开发人员所喜爱。</p>
<h1 id="Es安装"><a href="#Es安装" class="headerlink" title="Es安装"></a>Es安装</h1><pre><code>值得注意的是Es是依赖于Java环境的，当运行在Java 8 环境时会建议使用Java 11，因为在后续的版本中将取消对Java 8 的支持。</code></pre><h3 id="一、安装方式"><a href="#一、安装方式" class="headerlink" title="一、安装方式"></a>一、安装方式</h3><blockquote>
<p>目前官网不再提供源码下载，但是还是建议使用源码的方式进行安装，因为后续修改配置文件会比较方便。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;linux环境</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;获取源码包</span><br><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-5.6.9.tar</span><br><span class="line">&#x2F;&#x2F;解压源码包</span><br><span class="line">$ tar -zxvf elasticsearch-5.6.9.tar</span><br><span class="line">&#x2F;&#x2F;进入源码主目录</span><br><span class="line">$ cd elasticsearch-5.6.9&#x2F;</span><br></pre></td></tr></table></figure>
<p>至此，Es的安装就已经全部安装完毕了。</p>
<h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>打开./config/elasticsearch.yml文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim .&#x2F;config&#x2F;elasticsearch.yml</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;修改如下内容</span><br><span class="line"></span><br><span class="line">cluster.name: 集群名称</span><br><span class="line"></span><br><span class="line">node.name: 节点名称</span><br><span class="line"></span><br><span class="line">path.data: 数据存储位置（目录位置，不需要创建文件）</span><br><span class="line"></span><br><span class="line">path.logs: 日志存储位置（同上）</span><br><span class="line"></span><br><span class="line">network.host: 绑定的ip（默认是127.0.0.1，本机访问，可以改为0.0.0.0使其能够在公网访问）</span><br><span class="line"></span><br><span class="line">discovery.zen.ping.unicasts.hosts: 提供其他 Elasticsearch 服务节点的单点广播发现功能。配置集群中基于主机 TCP 端口的其他 Elasticsearch 服务的逗号分隔列表。</span><br><span class="line">例如：discovery.zen.ping.unicast.hosts&#x3D;&quot;localhost:9300,localhost:9301,localhost:9302</span><br></pre></td></tr></table></figure>
<p>基本的配置如上所示。</p>
<h3 id="三、启动"><a href="#三、启动" class="headerlink" title="三、启动"></a>三、启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;启动命令（Es主目录下）</span><br><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果是以root的身份去启动程序，会有报错。需要更换一个身份用户再次启动，同时将Es所在的文件夹权限设置为该用户可以访问和读写，否则会有报错出现。最简单的方法就是将Es文件夹及其子文件权限设置为777。重新执行指令之后会有日志信息打印出来，如果一切顺利，就可以访问<a href="http://ip地址:9200" target="_blank" rel="noopener">http://ip地址:9200</a> 来体验一下了。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;访问服务器所返回的JSON数据</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;节点名称&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;集群名称&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;集群ID&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;Es版本号&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;877a590&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2018-04-12T16:25:14.838Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果不顺利，根据报错信息。</p>
<blockquote>
<p>如果报错关于内存，请检查服务器的内存大小，如果小于2G，不建议在此服务器部署Es。即使程序运行正常，无端出现kill情况的也是由于内存过小导致的。</p>
</blockquote>
<blockquote>
<p>报错出现程序创建文件受到限制，需要修改该用户的最大创建文件数量（百度搜索即可）</p>
</blockquote>
]]></content>
      <tags>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2020/02/17/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<p>title: 设计模式（一）<br>date: 2020-02-17 18:38:51<br>comments: true<br>tags: 设计模式<br>copyright: true<br>password:<br>top: 1<br>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000</p>
<hr>
<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="为什么要有工厂模式？"><a href="#为什么要有工厂模式？" class="headerlink" title="为什么要有工厂模式？"></a>为什么要有工厂模式？</h2><blockquote>
<p>因为在有很多对象需要集中集中操作的时候，可以减少代码的复用和提高代码的灵活性，具体参考下例。</p>
</blockquote>
<h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><h3 id="1、什么是工厂？"><a href="#1、什么是工厂？" class="headerlink" title="1、什么是工厂？"></a>1、什么是工厂？</h3><pre><code>一个专门来创建实例的类叫做工厂，下面是一个简单的例子。</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public classs Factory&#123;  &#x2F;&#x2F;创建工厂类</span><br><span class="line">    public static Object CreateBean(Object arg)&#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;根据参数创造不同的子类，实现多态。</span><br><span class="line">        Object ob &#x3D; null;</span><br><span class="line">        switch(arg)&#123;</span><br><span class="line">            case: arg1&#123;ob &#x3D; new Object1();&#125;</span><br><span class="line"></span><br><span class="line">            case: .....</span><br><span class="line"></span><br><span class="line">           break;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂模式的好处有哪些？"><a href="#工厂模式的好处有哪些？" class="headerlink" title="工厂模式的好处有哪些？"></a>工厂模式的好处有哪些？</h2><pre><code>提高代码服用性和灵活性，工厂模式解决了对象创建问题。</code></pre><p>Tips:</p>
<blockquote>
<p><font color="blue">聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但是B对象不是A对象的一部分。。</font></p>
</blockquote>
<blockquote>
<p><font color="blue">封装的好处在于将逻辑处理分离开来，到达高复用、高扩展、高灵活性的的目的。</font></p>
</blockquote>
<hr>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote>
<p>以解决商场收银员业务为背景。</p>
</blockquote>
<h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><blockquote>
<p>策略模式：它定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式可以让算法的变化不会影响带到适应算法的客户。</p>
</blockquote>
<p><img src="..%5CPrintScreen%5CStrateModel.png" alt="策略模式结构图"></p>
<h2 id="策略模式的使用。"><a href="#策略模式的使用。" class="headerlink" title="策略模式的使用。"></a>策略模式的使用。</h2><pre><code>在什么时候使用策略模式呢？</code></pre><blockquote>
<p>策略模式是用来封装算法的，在实践中我们发现可以用它来封装几乎任何类型的规则。只要在不同的时间使用不同的规则，就可以使用策略模式来封装这种变化的可能性。在基本的策略模式中，选择具体的算法实现是由客户端来选择并转给上下文对象来处理的，但是这并没有减少客户端需要判断的压力。简单工厂模式与策略模式的结合可以将选择的任务交给上下文对象。</p>
</blockquote>
<p>Tips:</p>
<blockquote>
<p><font color="blue">面向对象编程并不是类越多越好，分类的目的是分装，分类的基础是抽象，分类的依据是具有相同的属性和操作。</font></p>
</blockquote>
<blockquote>
<p><font color="blue">封装变化点是面向对象一种重要的思想。</font></p>
</blockquote>
<hr>
<h1 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h1><h2 id="什么是职责单一模式？"><a href="#什么是职责单一模式？" class="headerlink" title="什么是职责单一模式？"></a>什么是职责单一模式？</h2><blockquote>
<p>就一个类而言，应该只有一个引起它变化的原因。</p>
</blockquote>
<h2 id="什么情景下使用职责单一模式？"><a href="#什么情景下使用职责单一模式？" class="headerlink" title="什么情景下使用职责单一模式？"></a>什么情景下使用职责单一模式？</h2><blockquote>
<p>如果一个类承担的职责过多，就相当于这些职责耦合在一起。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。软件设计真正要做的内容是发现职责并且把这些职责进行分离。如果能够想到多于一个的动机去改变这个类，那么这个类就具有多于一个的职责。</p>
</blockquote>
<p>Tips：</p>
<p><font color="red"></font></p>
<hr>
<h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>对于更改是封闭的，对于扩展是开放的。</p>
</blockquote>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote>
<p>当需求发生改变时，需要的考虑的是通过增添代码来实现需求，而不是通过修改。例如在加法系统的基础上要实现减法，可以先将计算进行抽象，然后通过多态实现加法和减法。在此后的变更中就可以通过抽象类来扩展乘法和其他运算了。</p>
</blockquote>
<blockquote>
<p>在软件设计中这种不可以修改，但是可以扩展的思想是一种重要的思想。</p>
</blockquote>
<hr>
<h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><pre><code>抽象不应该依赖于细节，细节应该依赖于抽象。</code></pre><blockquote>
<p>简而言之就是针对接口编程，而不是对实现编程。</p>
</blockquote>
<h2 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h2><pre><code>A、高层模块不应该依赖于底层模块。两个都应该依赖抽象。

B、抽象不应该依赖于细节，细节应该依赖于抽象。</code></pre>]]></content>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>设计模式（一）</title>
    <link href="/2020/11/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/11/19/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h1><h2 id="为什么要有工厂模式？"><a href="#为什么要有工厂模式？" class="headerlink" title="为什么要有工厂模式？"></a>为什么要有工厂模式？</h2><blockquote><p>因为在有很多对象需要集中集中操作的时候，可以减少代码的复用和提高代码的灵活性，具体参考下例。</p></blockquote><h2 id="什么是工厂模式？"><a href="#什么是工厂模式？" class="headerlink" title="什么是工厂模式？"></a>什么是工厂模式？</h2><h3 id="1、什么是工厂？"><a href="#1、什么是工厂？" class="headerlink" title="1、什么是工厂？"></a>1、什么是工厂？</h3><pre><code class="hljs typescript">一个专门来创建实例的类叫做工厂，下面是一个简单的例子。<span class="hljs-keyword">public</span> classs Factory&#123;  <span class="hljs-comment">//创建工厂类</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">CreateBean</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> arg</span>)</span>&#123;        <span class="hljs-comment">//根据参数创造不同的子类，实现多态。</span>        <span class="hljs-built_in">Object</span> ob = <span class="hljs-literal">null</span>;        <span class="hljs-keyword">switch</span>(arg)&#123;            <span class="hljs-keyword">case</span>: arg1&#123;ob = <span class="hljs-keyword">new</span> Object1();&#125;            <span class="hljs-keyword">case</span>: .....           <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;</code></pre><h2 id="工厂模式的好处有哪些？"><a href="#工厂模式的好处有哪些？" class="headerlink" title="工厂模式的好处有哪些？"></a>工厂模式的好处有哪些？</h2><pre><code class="hljs plain">提高代码服用性和灵活性，工厂模式解决了对象创建问题。</code></pre><p>Tips:</p><blockquote><p>聚合表示一种弱的“拥有”关系，体现的是A对象可以包含B对象，但是B对象不是A对象的一部分。。</p></blockquote><blockquote><p>封装的好处在于将逻辑处理分离开来，到达高复用、高扩展、高灵活性的的目的。</p></blockquote><hr><h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><blockquote><p>以解决商场收银员业务为背景。</p></blockquote><h2 id="什么是策略模式？"><a href="#什么是策略模式？" class="headerlink" title="什么是策略模式？"></a>什么是策略模式？</h2><blockquote><p>策略模式：它定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式可以让算法的变化不会影响带到适应算法的客户。</p></blockquote><p><img src="Strategy.jpg" alt="策略模式结构图"></p><h2 id="策略模式的使用。"><a href="#策略模式的使用。" class="headerlink" title="策略模式的使用。"></a>策略模式的使用。</h2><pre><code class="hljs plain">在什么时候使用策略模式呢？</code></pre><blockquote><p>策略模式是用来封装算法的，在实践中我们发现可以用它来封装几乎任何类型的规则。只要在不同的时间使用不同的规则，就可以使用策略模式来封装这种变化的可能性。在基本的策略模式中，选择具体的算法实现是由客户端来选择并转给上下文对象来处理的，但是这并没有减少客户端需要判断的压力。简单工厂模式与策略模式的结合可以将选择的任务交给上下文对象。</p></blockquote><p>Tips:</p><blockquote><p>面向对象编程并不是类越多越好，分类的目的是分装，分类的基础是抽象，分类的依据是具有相同的属性和操作。</p></blockquote><blockquote><p>封装变化点是面向对象一种重要的思想。</p></blockquote><hr><h1 id="单一职责模式"><a href="#单一职责模式" class="headerlink" title="单一职责模式"></a>单一职责模式</h1><h2 id="什么是职责单一模式？"><a href="#什么是职责单一模式？" class="headerlink" title="什么是职责单一模式？"></a>什么是职责单一模式？</h2><blockquote><p>就一个类而言，应该只有一个引起它变化的原因。</p></blockquote><h2 id="什么情景下使用职责单一模式？"><a href="#什么情景下使用职责单一模式？" class="headerlink" title="什么情景下使用职责单一模式？"></a>什么情景下使用职责单一模式？</h2><blockquote><p>如果一个类承担的职责过多，就相当于这些职责耦合在一起。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。软件设计真正要做的内容是发现职责并且把这些职责进行分离。如果能够想到多于一个的动机去改变这个类，那么这个类就具有多于一个的职责。</p></blockquote><p>Tips：</p><hr><h1 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>对于更改是封闭的，对于扩展是开放的。</p></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><blockquote><p>当需求发生改变时，需要的考虑的是通过增添代码来实现需求，而不是通过修改。例如在加法系统的基础上要实现减法，可以先将计算进行抽象，然后通过多态实现加法和减法。在此后的变更中就可以通过抽象类来扩展乘法和其他运算了。</p></blockquote><blockquote><p>在软件设计中这种不可以修改，但是可以扩展的思想是一种重要的思想。</p></blockquote><hr><h1 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><pre><code class="hljs plain">抽象不应该依赖于细节，细节应该依赖于抽象。</code></pre><blockquote><p>简而言之就是针对接口编程，而不是对实现编程。</p></blockquote><h2 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h2><pre><code class="hljs dns"><span class="hljs-keyword">A</span>、高层模块不应该依赖于底层模块。两个都应该依赖抽象。B、抽象不应该依赖于细节，细节应该依赖于抽象。</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
